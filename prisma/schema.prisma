generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model company {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?    @db.VarChar(255)
  name        String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  user_id     String     @db.Uuid
  tenant_id   String     @db.VarChar(255)
  user        user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  location    location[]
  service     service[]
}

model employee {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

model location {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  address    String     @db.VarChar(255)
  city       String     @db.VarChar(255)
  state      String     @db.VarChar(255)
  zip_code   String     @db.VarChar(255)
  company_id String     @db.Uuid
  created_at DateTime   @default(now()) @db.Timestamp(6)
  updated_at DateTime   @default(now()) @db.Timestamp(6)
  company    company    @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schedule   schedule[]
}

model schedule {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_time  DateTime @db.Timestamp(6)
  end_time    DateTime @db.Timestamp(6)
  user_id     String   @db.Uuid
  service_id  String   @db.Uuid
  location_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  location    location @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  service     service  @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model service {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String     @db.VarChar(255)
  description String?    @db.VarChar(255)
  duration    Int
  company_id  String     @db.Uuid
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  schedule    schedule[]
  company     company    @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique @db.VarChar(255)
  firstName   String?    @db.VarChar(255)
  lastName    String?    @db.VarChar(255)
  roq_user_id String     @db.VarChar(255)
  tenant_id   String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  company     company[]
  schedule    schedule[]
}
